class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

class Pair{
    int state;
    Node node;
    Pair(Node node, int state){
        this.state = state;
        this.node = node;
    }
}

class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {
        // add your code
        ArrayList<Integer>ans = new ArrayList<>();
        if(root==null)return ans;
        
        Map<Integer, Integer>map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(root,0));
        
        while(!q.isEmpty()){
            Pair top = q.remove();
            int state = top.state;
            Node temp = top.node;
            if(map.get(state)==null){
                map.put(state, temp.data);
            }
            if(temp.left!=null){
                q.add(new Pair(temp.left, state-1));
            }
            if(temp.right!=null){
                q.add(new Pair(temp.right, state+1));
            }
        }
        
        for(Map.Entry<Integer, Integer>entry : map.entrySet()){
            ans.add(entry.getValue());
        }
        return ans;
    }
}











